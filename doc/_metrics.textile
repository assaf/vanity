Metrics and experiments both measure, the main difference is scope.  Typically you would use metrics for long-term measurements of general indicators you are interested in.  For example, metrics for number of sign ups, comments submitted, videos uploaded, etc.  You would then run short-term experiments to improve on these metrics.  For example, experiment with different landing page to see how it affect sign ups.  You may run several experiments in attempt to improve the same metric, an experiment may also measure against multiple metrics (e.g. it may increase uploaded videos, but decrease comments).  A successful experiment is one that teaches what to do in order to improve a metric.

Start collecting metrics early.  The longer you collect them, the better you'll be able to spot trends.

You can collect different kinds of metrics.  Web applications focus on visits, but you may want to look deeper into the application and collect metrics that gauge engagement and growth from within your user base.  Use metrics to spot usage patterns and see which direction you should take your application in.  Metrics could point you in the direction of features that get all the usage, and are the basis for your application.  They'll also tell you which features are dead-weight so you can trim the fat.

Watching metrics is fun, but not where the action is.  The action is making changes that improve these metrics.  Once you get into the practice of changing code and measuring impact you will notice that your intuition is often right, but not always.  People will surprise you.  You'll realize that, rather than brainstorming five headlines for a page and using one, you can use all five and pick the one that works best.  You'll notice that more options you try out, the faster and further you can improve your metrics.  You'll want to make your experiments lightweight, quick to setup, measure and teardown (or officiate into code).  Welcome to EDD.

Metrics collect historical data which you can use to predict future behavior.  Classical example is looking at growth patterns to determine when it's time for an infrastructure upgrade and how large will it be.  You can also use historical data to predict probable range for future behavior (bounds), and issue alerts when system gets out of these bounds.  For example, if you get 50~75 registrations a day, and all of a sudden than number drops to zero, you might have a problem with the registration system.  You'll want an alert for that.  If it shoots into 200, you might have an awesome PR opportunity going on.

Metrics are not just for business people.  They can help you improve usability by measuring -- rather than guessing -- which actions have a positive affect.  Was it speeding up database queries or JavaScript code?  The new edit-in-place feature?  IE6 support?  Just kidding.  Metrics can help you find broken code that slipped past the test suite, although it won't tell you where the bug is, you'll notice when a broken feature gets no usage.   Metrics can also help you with content improvement (micro-copy).

